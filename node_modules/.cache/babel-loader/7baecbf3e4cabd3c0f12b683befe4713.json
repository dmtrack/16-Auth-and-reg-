{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\nconst http = axios.create({\n  baseURL: configFile.apiEndpoint\n});\nhttp.interceptors.request.use(function (config) {\n  if (configFile.isFireBase) {\n    const containSlash = /\\/$/gi.test(config.url);\n    config.url = (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\n\nfunction transformData(data) {\n  return data && !data._id ? Object.keys(data).map(key => ({ ...data[key]\n  })) : data;\n}\n\nhttp.interceptors.response.use(res => {\n  if (configFile.isFireBase) {\n    res.data = {\n      content: transformData(res.data)\n    };\n  }\n\n  return res;\n}, function (error) {\n  const expectedErrors = error.response && error.response.status >= 400 && error.response.status < 500;\n\n  if (!expectedErrors) {\n    console.log(error);\n    toast.error(\"Something was wrong. Try it later\");\n  }\n\n  return Promise.reject(error);\n});\nconst httpService = {\n  get: http.get,\n  post: http.post,\n  put: http.put,\n  delete: http.delete\n};\nexport default httpService;","map":{"version":3,"sources":["/Users/dmtrack/Documents/JS/Module 2 React/16 {Auth and reg}/src/app/services/http.service.js"],"names":["axios","toast","configFile","http","create","baseURL","apiEndpoint","interceptors","request","use","config","isFireBase","containSlash","test","url","slice","error","Promise","reject","transformData","data","_id","Object","keys","map","key","response","res","content","expectedErrors","status","console","log","httpService","get","post","put","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AAEA,MAAMC,IAAI,GAAGH,KAAK,CAACI,MAAN,CAAa;AACxBC,EAAAA,OAAO,EAAEH,UAAU,CAACI;AADI,CAAb,CAAb;AAIAH,IAAI,CAACI,YAAL,CAAkBC,OAAlB,CAA0BC,GAA1B,CACE,UAAUC,MAAV,EAAkB;AAChB,MAAIR,UAAU,CAACS,UAAf,EAA2B;AACzB,UAAMC,YAAY,GAAG,QAAQC,IAAR,CAAaH,MAAM,CAACI,GAApB,CAArB;AACAJ,IAAAA,MAAM,CAACI,GAAP,GACE,CAACF,YAAY,GAAGF,MAAM,CAACI,GAAP,CAAWC,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CAAH,GAA6BL,MAAM,CAACI,GAAjD,IAAwD,OAD1D;AAED;;AACD,SAAOJ,MAAP;AACD,CARH,EASE,UAAUM,KAAV,EAAiB;AACf,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAXH;;AAaA,SAASG,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAOA,IAAI,IAAI,CAACA,IAAI,CAACC,GAAd,GACHC,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,GAAlB,CAAuBC,GAAD,KAAU,EAC9B,GAAGL,IAAI,CAACK,GAAD;AADuB,GAAV,CAAtB,CADG,GAIHL,IAJJ;AAKD;;AACDjB,IAAI,CAACI,YAAL,CAAkBmB,QAAlB,CAA2BjB,GAA3B,CACGkB,GAAD,IAAS;AACP,MAAIzB,UAAU,CAACS,UAAf,EAA2B;AACzBgB,IAAAA,GAAG,CAACP,IAAJ,GAAW;AAAEQ,MAAAA,OAAO,EAAET,aAAa,CAACQ,GAAG,CAACP,IAAL;AAAxB,KAAX;AACD;;AACD,SAAOO,GAAP;AACD,CANH,EAOE,UAAUX,KAAV,EAAiB;AACf,QAAMa,cAAc,GAClBb,KAAK,CAACU,QAAN,IACAV,KAAK,CAACU,QAAN,CAAeI,MAAf,IAAyB,GADzB,IAEAd,KAAK,CAACU,QAAN,CAAeI,MAAf,GAAwB,GAH1B;;AAKA,MAAI,CAACD,cAAL,EAAqB;AACnBE,IAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ;AACAf,IAAAA,KAAK,CAACe,KAAN,CAAY,mCAAZ;AACD;;AACD,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAlBH;AAoBA,MAAMiB,WAAW,GAAG;AAClBC,EAAAA,GAAG,EAAE/B,IAAI,CAAC+B,GADQ;AAElBC,EAAAA,IAAI,EAAEhC,IAAI,CAACgC,IAFO;AAGlBC,EAAAA,GAAG,EAAEjC,IAAI,CAACiC,GAHQ;AAIlBC,EAAAA,MAAM,EAAElC,IAAI,CAACkC;AAJK,CAApB;AAMA,eAAeJ,WAAf","sourcesContent":["import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\n\nconst http = axios.create({\n  baseURL: configFile.apiEndpoint,\n});\n\nhttp.interceptors.request.use(\n  function (config) {\n    if (configFile.isFireBase) {\n      const containSlash = /\\/$/gi.test(config.url);\n      config.url =\n        (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n    }\n    return config;\n  },\n  function (error) {\n    return Promise.reject(error);\n  }\n);\nfunction transformData(data) {\n  return data && !data._id\n    ? Object.keys(data).map((key) => ({\n        ...data[key],\n      }))\n    : data;\n}\nhttp.interceptors.response.use(\n  (res) => {\n    if (configFile.isFireBase) {\n      res.data = { content: transformData(res.data) };\n    }\n    return res;\n  },\n  function (error) {\n    const expectedErrors =\n      error.response &&\n      error.response.status >= 400 &&\n      error.response.status < 500;\n\n    if (!expectedErrors) {\n      console.log(error);\n      toast.error(\"Something was wrong. Try it later\");\n    }\n    return Promise.reject(error);\n  }\n);\nconst httpService = {\n  get: http.get,\n  post: http.post,\n  put: http.put,\n  delete: http.delete,\n};\nexport default httpService;\n"]},"metadata":{},"sourceType":"module"}