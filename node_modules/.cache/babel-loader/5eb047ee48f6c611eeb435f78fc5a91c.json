{"ast":null,"code":"var _jsxFileName = \"/Users/dmtrack/Documents/JS/Module 2 React/16 {Auth and reg}/src/app/components/ui/registerForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../utils/validator\";\nimport TextField from \"../common/form/textField\";\nimport api from \"../../api\";\nimport SelectField from \"../common/form/selectField\";\nimport RadioField from \"../common/form/radioField\";\nimport MultiSelectField from \"../common/form/multiSelectField\";\nimport CheckBoxField from \"../common/form/checkBoxField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RegisterForm = () => {\n  _s();\n\n  const [data, setData] = useState({\n    email: \"\",\n    password: \"\",\n    profession: \"\",\n    sex: \"male\",\n    qualities: [],\n    licence: false\n  });\n  const [qualities, setQualities] = useState([]);\n  const [professions, setProfession] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  const getProfessionById = id => {\n    for (const prof of professions) {\n      if (prof.value === id) {\n        return {\n          _id: prof.value,\n          name: prof.label\n        };\n      }\n    }\n  };\n\n  const getQualities = elements => {\n    const qualitiesArray = [];\n\n    for (const elem of elements) {\n      for (const quality in qualities) {\n        if (elem.value === qualities[quality].value) {\n          qualitiesArray.push({\n            _id: qualities[quality].value,\n            name: qualities[quality].label,\n            color: qualities[quality].color\n          });\n        }\n      }\n    }\n\n    return qualitiesArray;\n  };\n\n  useEffect(() => {\n    api.professions.fetchAll().then(data => {\n      const professionsList = Object.keys(data).map(professionName => ({\n        label: data[professionName].name,\n        value: data[professionName]._id\n      }));\n      setProfession(professionsList);\n    });\n    api.qualities.fetchAll().then(data => {\n      const qualitiesList = Object.keys(data).map(optionName => ({\n        value: data[optionName]._id,\n        label: data[optionName].name,\n        color: data[optionName].color\n      }));\n      setQualities(qualitiesList);\n    });\n  }, []);\n\n  const handleChange = target => {\n    setData(prevState => ({ ...prevState,\n      [target.name]: target.value\n    }));\n  };\n\n  const validatorConfig = {\n    email: {\n      isRequired: {\n        message: \"Электронная почта обязательна для заполнения\"\n      },\n      isEmail: {\n        message: \"Email введен некорректно\"\n      }\n    },\n    password: {\n      isRequired: {\n        message: \"Пароль обязателен для заполнения\"\n      },\n      isCapitalSymbol: {\n        message: \"Пароль должен содержать хотя бы одну заглавную букву\"\n      },\n      isContainDigit: {\n        message: \"Пароль должен содержать хотя бы одно число\"\n      },\n      min: {\n        message: \"Пароль должен состоять минимум из 8 символов\",\n        value: 8\n      }\n    },\n    profession: {\n      isRequired: {\n        message: \"Обязательно выберите вашу профессию\"\n      }\n    },\n    licence: {\n      isRequired: {\n        message: \"Вы не можете использовать наш сервис без подтверждения лицензионного соглашения\"\n      }\n    }\n  };\n  useEffect(() => {\n    validate();\n  }, [data]);\n\n  const validate = () => {\n    const errors = validator(data, validatorConfig);\n    setErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const isValid = Object.keys(errors).length === 0;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isValid = validate();\n    if (!isValid) return;\n    const {\n      profession,\n      qualities\n    } = data;\n    console.log({ ...data,\n      profession: getProfessionById(profession),\n      qualities: getQualities(qualities)\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"\\u042D\\u043B\\u0435\\u043A\\u0442\\u0440\\u043E\\u043D\\u043D\\u0430\\u044F \\u043F\\u043E\\u0447\\u0442\\u0430\",\n      name: \"email\",\n      value: data.email,\n      onChange: handleChange,\n      error: errors.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n      type: \"password\",\n      name: \"password\",\n      value: data.password,\n      onChange: handleChange,\n      error: errors.password\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SelectField, {\n      label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438 \\u0441\\u0432\\u043E\\u044E \\u043F\\u0440\\u043E\\u0444\\u0435\\u0441\\u0441\\u0438\\u044E\",\n      defaultOption: \"Choose...\",\n      options: professions,\n      name: \"profession\",\n      onChange: handleChange,\n      value: data.profession,\n      error: errors.profession\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RadioField, {\n      options: [{\n        name: \"Male\",\n        value: \"male\"\n      }, {\n        name: \"Female\",\n        value: \"female\"\n      }, {\n        name: \"Other\",\n        value: \"other\"\n      }],\n      value: data.sex,\n      name: \"sex\",\n      onChange: handleChange,\n      label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0432\\u0430\\u0448 \\u043F\\u043E\\u043B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MultiSelectField, {\n      options: qualities,\n      onChange: handleChange,\n      defaultValue: data.qualities,\n      name: \"qualities\",\n      label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0432\\u0430\\u0448\\u0438 \\u043A\\u0430\\u0447\\u0435\\u0441\\u0442\\u0432\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CheckBoxField, {\n      value: data.licence,\n      onChange: handleChange,\n      name: \"licence\",\n      error: errors.licence,\n      children: [\"\\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0434\\u0438\\u0442\\u044C \", /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"\\u043B\\u0438\\u0446\\u0435\\u043D\\u0437\\u0438\\u043E\\u043D\\u043D\\u043E\\u0435 \\u0441\\u043E\\u0433\\u043B\\u0430\\u0448\\u0435\\u043D\\u0438\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary w-100 mx-auto\",\n      type: \"submit\",\n      disabled: !isValid,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RegisterForm, \"GNE/LA7RTYXSIzdxBa05sQGYH8E=\");\n\n_c = RegisterForm;\nexport default RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["/Users/dmtrack/Documents/JS/Module 2 React/16 {Auth and reg}/src/app/components/ui/registerForm.jsx"],"names":["React","useEffect","useState","validator","TextField","api","SelectField","RadioField","MultiSelectField","CheckBoxField","RegisterForm","data","setData","email","password","profession","sex","qualities","licence","setQualities","professions","setProfession","errors","setErrors","getProfessionById","id","prof","value","_id","name","label","getQualities","elements","qualitiesArray","elem","quality","push","color","fetchAll","then","professionsList","Object","keys","map","professionName","qualitiesList","optionName","handleChange","target","prevState","validatorConfig","isRequired","message","isEmail","isCapitalSymbol","isContainDigit","min","validate","length","isValid","handleSubmit","e","preventDefault","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../utils/validator\";\nimport TextField from \"../common/form/textField\";\nimport api from \"../../api\";\nimport SelectField from \"../common/form/selectField\";\nimport RadioField from \"../common/form/radioField\";\nimport MultiSelectField from \"../common/form/multiSelectField\";\nimport CheckBoxField from \"../common/form/checkBoxField\";\n\nconst RegisterForm = () => {\n    const [data, setData] = useState({\n        email: \"\",\n        password: \"\",\n        profession: \"\",\n        sex: \"male\",\n        qualities: [],\n        licence: false\n    });\n    const [qualities, setQualities] = useState([]);\n    const [professions, setProfession] = useState([]);\n    const [errors, setErrors] = useState({});\n\n    const getProfessionById = (id) => {\n        for (const prof of professions) {\n            if (prof.value === id) {\n                return { _id: prof.value, name: prof.label };\n            }\n        }\n    };\n    const getQualities = (elements) => {\n        const qualitiesArray = [];\n        for (const elem of elements) {\n            for (const quality in qualities) {\n                if (elem.value === qualities[quality].value) {\n                    qualitiesArray.push({\n                        _id: qualities[quality].value,\n                        name: qualities[quality].label,\n                        color: qualities[quality].color\n                    });\n                }\n            }\n        }\n        return qualitiesArray;\n    };\n\n    useEffect(() => {\n        api.professions.fetchAll().then((data) => {\n            const professionsList = Object.keys(data).map((professionName) => ({\n                label: data[professionName].name,\n                value: data[professionName]._id\n            }));\n            setProfession(professionsList);\n        });\n        api.qualities.fetchAll().then((data) => {\n            const qualitiesList = Object.keys(data).map((optionName) => ({\n                value: data[optionName]._id,\n                label: data[optionName].name,\n                color: data[optionName].color\n            }));\n            setQualities(qualitiesList);\n        });\n    }, []);\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validatorConfig = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            },\n            isEmail: {\n                message: \"Email введен некорректно\"\n            }\n        },\n        password: {\n            isRequired: {\n                message: \"Пароль обязателен для заполнения\"\n            },\n            isCapitalSymbol: {\n                message: \"Пароль должен содержать хотя бы одну заглавную букву\"\n            },\n            isContainDigit: {\n                message: \"Пароль должен содержать хотя бы одно число\"\n            },\n            min: {\n                message: \"Пароль должен состоять минимум из 8 символов\",\n                value: 8\n            }\n        },\n        profession: {\n            isRequired: {\n                message: \"Обязательно выберите вашу профессию\"\n            }\n        },\n        licence: {\n            isRequired: {\n                message:\n                    \"Вы не можете использовать наш сервис без подтверждения лицензионного соглашения\"\n            }\n        }\n    };\n    useEffect(() => {\n        validate();\n    }, [data]);\n    const validate = () => {\n        const errors = validator(data, validatorConfig);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        const { profession, qualities } = data;\n        console.log({\n            ...data,\n            profession: getProfessionById(profession),\n            qualities: getQualities(qualities)\n        });\n    };\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField\n                label=\"Электронная почта\"\n                name=\"email\"\n                value={data.email}\n                onChange={handleChange}\n                error={errors.email}\n            />\n            <TextField\n                label=\"Пароль\"\n                type=\"password\"\n                name=\"password\"\n                value={data.password}\n                onChange={handleChange}\n                error={errors.password}\n            />\n            <SelectField\n                label=\"Выбери свою профессию\"\n                defaultOption=\"Choose...\"\n                options={professions}\n                name=\"profession\"\n                onChange={handleChange}\n                value={data.profession}\n                error={errors.profession}\n            />\n            <RadioField\n                options={[\n                    { name: \"Male\", value: \"male\" },\n                    { name: \"Female\", value: \"female\" },\n                    { name: \"Other\", value: \"other\" }\n                ]}\n                value={data.sex}\n                name=\"sex\"\n                onChange={handleChange}\n                label=\"Выберите ваш пол\"\n            />\n            <MultiSelectField\n                options={qualities}\n                onChange={handleChange}\n                defaultValue={data.qualities}\n                name=\"qualities\"\n                label=\"Выберите ваши качества\"\n            />\n            <CheckBoxField\n                value={data.licence}\n                onChange={handleChange}\n                name=\"licence\"\n                error={errors.licence}\n            >\n                Подтвердить <a>лицензионное соглашение</a>\n            </CheckBoxField>\n            <button\n                className=\"btn btn-primary w-100 mx-auto\"\n                type=\"submit\"\n                disabled={!isValid}\n            >\n                Submit\n            </button>\n        </form>\n    );\n};\n\nexport default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}