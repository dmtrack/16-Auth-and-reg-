{"ast":null,"code":"var _jsxFileName = \"/Users/dmtrack/Documents/JS/Module 2 React/16 {Auth and reg}/src/app/hooks/useAuth.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport userService from \"../services/user.service\";\nimport { toast } from \"react-toastify\";\nimport { setTokens } from \"../services/localStorageService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpAuth = axios.create();\nconst AuthContext = /*#__PURE__*/React.createContext();\nexport const useAuth = () => {\n  _s();\n\n  return useContext(AuthContext);\n};\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nconst AuthProvider = ({\n  children\n}) => {\n  _s2();\n\n  const [currentUser, setUser] = useState({});\n  const [error, setError] = useState(null);\n\n  function randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  async function signUp({\n    email,\n    password,\n    ...rest\n  }) {\n    const url = `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${process.env.REACT_APP_FIREBASE_KEY}`;\n\n    try {\n      const {\n        data\n      } = await httpAuth.post(url, {\n        email,\n        password,\n        returnSecureToken: true\n      });\n      setTokens(data);\n      await createUser({\n        _id: data.localId,\n        email,\n        rate: randomInt(1, 5),\n        completedMeetings: randomInt(1, 200),\n        ...rest\n      });\n      console.log(data);\n    } catch (error) {\n      errorCatcher(error);\n      const {\n        code,\n        message\n      } = error.response.data.error;\n      console.log(code, message);\n\n      if (code === 400) {\n        if (message === \"EMAIL_EXISTS\") {\n          const errorObject = {\n            email: \"Пользователь с таким Email уже существует\"\n          };\n          throw errorObject;\n        }\n      }\n    }\n  }\n\n  async function createUser(data) {\n    try {\n      const {\n        content\n      } = await userService.create(data);\n      console.log(content, \"createUser\");\n      setUser(content);\n    } catch (error) {\n      errorCatcher(error);\n    }\n  }\n\n  async function signIn({\n    email,\n    password,\n    ...rest\n  }) {\n    const url = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${process.env.REACT_APP_FIREBASE_KEY}`;\n\n    try {\n      const {\n        data\n      } = await httpAuth.post(url, {\n        email,\n        password,\n        returnSecureToken: true\n      });\n      setTokens(data);\n      console.log(data);\n    } catch (error) {\n      errorCatcher(error);\n      let {\n        code,\n        message\n      } = error.response.data.error;\n      console.log(code, message);\n\n      if (code === 400) {\n        if (message === \"EMAIL_NOT_FOUND\") {\n          const errorObject = {\n            email: \"Пользователь с таким Email не существует\"\n          };\n          throw errorObject;\n        }\n\n        if (message === \"INVALID_PASSWORD\") {\n          const errorObject = {\n            password: \"Введён неправильный пароль\"\n          };\n          throw errorObject;\n        }\n      }\n    }\n  }\n\n  function errorCatcher(error) {\n    const {\n      message\n    } = error.response.data;\n    setError(message);\n  }\n\n  useEffect(() => {\n    if (error !== null) {\n      toast(error);\n      setError(null);\n    }\n  }, [error]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      signUp,\n      currentUser,\n      signIn\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(AuthProvider, \"eHdUE3YM8T8lhXhD9NPq1nJ4Lu8=\");\n\n_c = AuthProvider;\nAuthProvider.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node])\n};\nexport default AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/dmtrack/Documents/JS/Module 2 React/16 {Auth and reg}/src/app/hooks/useAuth.jsx"],"names":["React","useContext","useEffect","useState","PropTypes","axios","userService","toast","setTokens","httpAuth","create","AuthContext","createContext","useAuth","AuthProvider","children","currentUser","setUser","error","setError","randomInt","min","max","Math","floor","random","signUp","email","password","rest","url","process","env","REACT_APP_FIREBASE_KEY","data","post","returnSecureToken","createUser","_id","localId","rate","completedMeetings","console","log","errorCatcher","code","message","response","errorObject","content","signIn","propTypes","oneOfType","arrayOf","node"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport userService from \"../services/user.service\";\nimport { toast } from \"react-toastify\";\nimport { setTokens } from \"../services/localStorageService\";\n\nconst httpAuth = axios.create();\nconst AuthContext = React.createContext();\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\nconst AuthProvider = ({ children }) => {\n  const [currentUser, setUser] = useState({});\n  const [error, setError] = useState(null);\n  function randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n  async function signUp({ email, password, ...rest }) {\n    const url = `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${process.env.REACT_APP_FIREBASE_KEY}`;\n\n    try {\n      const { data } = await httpAuth.post(url, {\n        email,\n        password,\n        returnSecureToken: true,\n      });\n      setTokens(data);\n      await createUser({\n        _id: data.localId,\n        email,\n        rate: randomInt(1, 5),\n        completedMeetings: randomInt(1, 200),\n        ...rest,\n      });\n      console.log(data);\n    } catch (error) {\n      errorCatcher(error);\n      const { code, message } = error.response.data.error;\n      console.log(code, message);\n      if (code === 400) {\n        if (message === \"EMAIL_EXISTS\") {\n          const errorObject = {\n            email: \"Пользователь с таким Email уже существует\",\n          };\n          throw errorObject;\n        }\n      }\n    }\n  }\n  async function createUser(data) {\n    try {\n      const { content } = await userService.create(data);\n      console.log(content, \"createUser\");\n      setUser(content);\n    } catch (error) {\n      errorCatcher(error);\n    }\n  }\n\n  async function signIn({ email, password, ...rest }) {\n    const url = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${process.env.REACT_APP_FIREBASE_KEY}`;\n    try {\n      const { data } = await httpAuth.post(url, {\n        email,\n        password,\n        returnSecureToken: true,\n      });\n      setTokens(data);\n      console.log(data);\n    } catch (error) {\n      errorCatcher(error);\n      let { code, message } = error.response.data.error;\n      console.log(code, message);\n      if (code === 400) {\n        if (message === \"EMAIL_NOT_FOUND\") {\n          const errorObject = {\n            email: \"Пользователь с таким Email не существует\",\n          };\n          throw errorObject;\n        }\n        if (message === \"INVALID_PASSWORD\") {\n          const errorObject = {\n            password: \"Введён неправильный пароль\",\n          };\n          throw errorObject;\n        }\n      }\n    }\n  }\n\n  function errorCatcher(error) {\n    const { message } = error.response.data;\n    setError(message);\n  }\n  useEffect(() => {\n    if (error !== null) {\n      toast(error);\n      setError(null);\n    }\n  }, [error]);\n  return (\n    <AuthContext.Provider value={{ signUp, currentUser, signIn }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nAuthProvider.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n};\nexport default AuthProvider;\n"]},"metadata":{},"sourceType":"module"}