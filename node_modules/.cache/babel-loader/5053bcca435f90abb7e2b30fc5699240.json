{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\nconst http = axios.create({});\naxios.defaults.baseURL = configFile.apiEndpoint;\naxios.interceptors.request.use(function (config) {\n  if (configFile.isFireBase) {\n    const containSlash = /\\/$/gi.test(config.url);\n    config.url = (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\n\nfunction transformData(data) {\n  return data ? Object.keys(data).map(key => ({ ...data[key]\n  })) : [];\n}\n\naxios.interceptors.response.use(res => {\n  if (configFile.isFireBase) {\n    res.data = {\n      content: transformData(res.data)\n    };\n  }\n\n  return res;\n}, function (error) {\n  const expectedErrors = error.response && error.response.status >= 400 && error.response.status < 500;\n\n  if (!expectedErrors) {\n    console.log(error);\n    toast.error(\"Something was wrong. Try it later\");\n  }\n\n  return Promise.reject(error);\n});\nconst httpService = {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete\n};\nexport default httpService;","map":{"version":3,"sources":["/Users/dmtrack/Documents/JS/Module 2 React/16 {Auth and reg}/src/app/services/http.service.js"],"names":["axios","toast","configFile","http","create","defaults","baseURL","apiEndpoint","interceptors","request","use","config","isFireBase","containSlash","test","url","slice","error","Promise","reject","transformData","data","Object","keys","map","key","response","res","content","expectedErrors","status","console","log","httpService","get","post","put","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AAEA,MAAMC,IAAI,GAAGH,KAAK,CAACI,MAAN,CAAa,EAAb,CAAb;AACAJ,KAAK,CAACK,QAAN,CAAeC,OAAf,GAAyBJ,UAAU,CAACK,WAApC;AAEAP,KAAK,CAACQ,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACE,UAAUC,MAAV,EAAkB;AAChB,MAAIT,UAAU,CAACU,UAAf,EAA2B;AACzB,UAAMC,YAAY,GAAG,QAAQC,IAAR,CAAaH,MAAM,CAACI,GAApB,CAArB;AACAJ,IAAAA,MAAM,CAACI,GAAP,GACE,CAACF,YAAY,GAAGF,MAAM,CAACI,GAAP,CAAWC,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CAAH,GAA6BL,MAAM,CAACI,GAAjD,IAAwD,OAD1D;AAED;;AACD,SAAOJ,MAAP;AACD,CARH,EASE,UAAUM,KAAV,EAAiB;AACf,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAXH;;AAaA,SAASG,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAOA,IAAI,GACPC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,GAAlB,CAAuBC,GAAD,KAAU,EAC9B,GAAGJ,IAAI,CAACI,GAAD;AADuB,GAAV,CAAtB,CADO,GAIP,EAJJ;AAKD;;AACDzB,KAAK,CAACQ,YAAN,CAAmBkB,QAAnB,CAA4BhB,GAA5B,CACGiB,GAAD,IAAS;AACP,MAAIzB,UAAU,CAACU,UAAf,EAA2B;AACzBe,IAAAA,GAAG,CAACN,IAAJ,GAAW;AAAEO,MAAAA,OAAO,EAAER,aAAa,CAACO,GAAG,CAACN,IAAL;AAAxB,KAAX;AACD;;AACD,SAAOM,GAAP;AACD,CANH,EAOE,UAAUV,KAAV,EAAiB;AACf,QAAMY,cAAc,GAClBZ,KAAK,CAACS,QAAN,IACAT,KAAK,CAACS,QAAN,CAAeI,MAAf,IAAyB,GADzB,IAEAb,KAAK,CAACS,QAAN,CAAeI,MAAf,GAAwB,GAH1B;;AAKA,MAAI,CAACD,cAAL,EAAqB;AACnBE,IAAAA,OAAO,CAACC,GAAR,CAAYf,KAAZ;AACAhB,IAAAA,KAAK,CAACgB,KAAN,CAAY,mCAAZ;AACD;;AACD,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAlBH;AAoBA,MAAMgB,WAAW,GAAG;AAClBC,EAAAA,GAAG,EAAElC,KAAK,CAACkC,GADO;AAElBC,EAAAA,IAAI,EAAEnC,KAAK,CAACmC,IAFM;AAGlBC,EAAAA,GAAG,EAAEpC,KAAK,CAACoC,GAHO;AAIlBC,EAAAA,MAAM,EAAErC,KAAK,CAACqC;AAJI,CAApB;AAMA,eAAeJ,WAAf","sourcesContent":["import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\n\nconst http = axios.create({});\naxios.defaults.baseURL = configFile.apiEndpoint;\n\naxios.interceptors.request.use(\n  function (config) {\n    if (configFile.isFireBase) {\n      const containSlash = /\\/$/gi.test(config.url);\n      config.url =\n        (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n    }\n    return config;\n  },\n  function (error) {\n    return Promise.reject(error);\n  }\n);\nfunction transformData(data) {\n  return data\n    ? Object.keys(data).map((key) => ({\n        ...data[key],\n      }))\n    : [];\n}\naxios.interceptors.response.use(\n  (res) => {\n    if (configFile.isFireBase) {\n      res.data = { content: transformData(res.data) };\n    }\n    return res;\n  },\n  function (error) {\n    const expectedErrors =\n      error.response &&\n      error.response.status >= 400 &&\n      error.response.status < 500;\n\n    if (!expectedErrors) {\n      console.log(error);\n      toast.error(\"Something was wrong. Try it later\");\n    }\n    return Promise.reject(error);\n  }\n);\nconst httpService = {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n};\nexport default httpService;\n"]},"metadata":{},"sourceType":"module"}