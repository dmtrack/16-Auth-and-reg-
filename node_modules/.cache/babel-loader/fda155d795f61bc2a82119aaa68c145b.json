{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\naxios.defaults.baseURL = configFile.apiEndpoint;\naxios.interceptors.request.use(function (config) {\n  if (configFile.isFireBase) {\n    const containSlash = /\\/$/gi.test(config.url);\n    config.url = (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\n\nfunction transformData(data) {\n  return data ? Object.keys(data).map(key => ({ ...data[key]\n  })) : [];\n}\n\naxios.interceptors.response.use(res => {\n  if (configFile.isFireBase) {\n    res.data = {\n      content: transformData(res.data)\n    };\n  }\n\n  return res;\n}, function (error) {\n  const expectedErrors = error.response && error.response.status >= 400 && error.response.status < 500;\n\n  if (!expectedErrors) {\n    console.log(error);\n    toast.error(\"Something was wrong. Try it later\");\n  }\n\n  return Promise.reject(error);\n});\nconst httpService = {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete\n};\nexport default httpService;","map":{"version":3,"sources":["/Users/dmtrack/Documents/JS/Module 2 React/16 {Auth and reg}/src/app/services/http.service.js"],"names":["axios","toast","configFile","defaults","baseURL","apiEndpoint","interceptors","request","use","config","isFireBase","containSlash","test","url","slice","error","Promise","reject","transformData","data","Object","keys","map","key","response","res","content","expectedErrors","status","console","log","httpService","get","post","put","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AAEAF,KAAK,CAACG,QAAN,CAAeC,OAAf,GAAyBF,UAAU,CAACG,WAApC;AAEAL,KAAK,CAACM,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,UAAUC,MAAV,EAAkB;AACd,MAAIP,UAAU,CAACQ,UAAf,EAA2B;AACvB,UAAMC,YAAY,GAAG,QAAQC,IAAR,CAAaH,MAAM,CAACI,GAApB,CAArB;AACAJ,IAAAA,MAAM,CAACI,GAAP,GACI,CAACF,YAAY,GAAGF,MAAM,CAACI,GAAP,CAAWC,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CAAH,GAA6BL,MAAM,CAACI,GAAjD,IAAwD,OAD5D;AAEH;;AACD,SAAOJ,MAAP;AACH,CARL,EASI,UAAUM,KAAV,EAAiB;AACb,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAXL;;AAaA,SAASG,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,SAAOA,IAAI,GACLC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,GAAlB,CAAuBC,GAAD,KAAU,EAC5B,GAAGJ,IAAI,CAACI,GAAD;AADqB,GAAV,CAAtB,CADK,GAIL,EAJN;AAKH;;AACDvB,KAAK,CAACM,YAAN,CAAmBkB,QAAnB,CAA4BhB,GAA5B,CACKiB,GAAD,IAAS;AACL,MAAIvB,UAAU,CAACQ,UAAf,EAA2B;AACvBe,IAAAA,GAAG,CAACN,IAAJ,GAAW;AAAEO,MAAAA,OAAO,EAAER,aAAa,CAACO,GAAG,CAACN,IAAL;AAAxB,KAAX;AACH;;AACD,SAAOM,GAAP;AACH,CANL,EAOI,UAAUV,KAAV,EAAiB;AACb,QAAMY,cAAc,GAChBZ,KAAK,CAACS,QAAN,IACAT,KAAK,CAACS,QAAN,CAAeI,MAAf,IAAyB,GADzB,IAEAb,KAAK,CAACS,QAAN,CAAeI,MAAf,GAAwB,GAH5B;;AAKA,MAAI,CAACD,cAAL,EAAqB;AACjBE,IAAAA,OAAO,CAACC,GAAR,CAAYf,KAAZ;AACAd,IAAAA,KAAK,CAACc,KAAN,CAAY,mCAAZ;AACH;;AACD,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAlBL;AAoBA,MAAMgB,WAAW,GAAG;AAChBC,EAAAA,GAAG,EAAEhC,KAAK,CAACgC,GADK;AAEhBC,EAAAA,IAAI,EAAEjC,KAAK,CAACiC,IAFI;AAGhBC,EAAAA,GAAG,EAAElC,KAAK,CAACkC,GAHK;AAIhBC,EAAAA,MAAM,EAAEnC,KAAK,CAACmC;AAJE,CAApB;AAMA,eAAeJ,WAAf","sourcesContent":["import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\n\naxios.defaults.baseURL = configFile.apiEndpoint;\n\naxios.interceptors.request.use(\n    function (config) {\n        if (configFile.isFireBase) {\n            const containSlash = /\\/$/gi.test(config.url);\n            config.url =\n                (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n        }\n        return config;\n    },\n    function (error) {\n        return Promise.reject(error);\n    }\n);\nfunction transformData(data) {\n    return data\n        ? Object.keys(data).map((key) => ({\n              ...data[key]\n          }))\n        : [];\n}\naxios.interceptors.response.use(\n    (res) => {\n        if (configFile.isFireBase) {\n            res.data = { content: transformData(res.data) };\n        }\n        return res;\n    },\n    function (error) {\n        const expectedErrors =\n            error.response &&\n            error.response.status >= 400 &&\n            error.response.status < 500;\n\n        if (!expectedErrors) {\n            console.log(error);\n            toast.error(\"Something was wrong. Try it later\");\n        }\n        return Promise.reject(error);\n    }\n);\nconst httpService = {\n    get: axios.get,\n    post: axios.post,\n    put: axios.put,\n    delete: axios.delete\n};\nexport default httpService;\n"]},"metadata":{},"sourceType":"module"}